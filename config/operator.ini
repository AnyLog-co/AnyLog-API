[general] 
# Type of node AnyLog should run
#   master - a "notary" system between other nodes in the network via either a public or private blockchain
#   operator - nodes containing generated by sensors. these can be either physical devices (ex. cars) or remote cloud
#   publisher - nodes that simply generate data and send them to operator nodes
#   query - nodes dedicated to query and BI activity
node_type=operator

# When setting up a node, declare the name of the node. While "node_type" declare which process in `init` AnyLog-Network/anylog_demo_scripts/ to run. 
node_name=anylog-test-operator 

# The name of the company correlated with the cluster
company_name=AnyLog 

set_authentication=false 
#authentication_user_info=<authentication_user_info>

# Operator Member ID - if not set AnyLog will create a new ID 
#member_id=<member_id> 

# Machine location - coordinates location is accessible via Grafana Map visualization
#location=<location> 

[networking] 
# TCP IP:Port from which the operator node sends/receives messages
master_node=10.0.0.26:2048  

# TCP port for node used to communicate with other nodes in the network. Please make sure the port is open and avilable
anylog_tcp_port=2148 

# REST port for node used to communicate with other nodes in the network. Please make sure the port is open and avilable
anylog_rest_port=2149 

# Enable local broker
local_broker=false 

# AnyLog Broker Port
#anylog_broker_port=<anylog_broker_port>  

[cluster]
# set operator as part of a cluster (True) or not (False) 
enable_cluster=true 

# ID of cluster (should already exist) that user wants to connect to 
#cluster_id=<cluster_id> 
 
# Name of the cluster
cluster_name=anylog-test-cluster 

# list of tables correlated to the logical database (default_dbms) stored within the cluster  
#table=<table>

[database] 
# Logical database name within operator node
default_dbms=anylog 

# Type of database to be used by the AnyLog node
#    PSQL 
#    SQLite 
db_type=psql 
   
# Database credentials -- ${db_user}@{db_ip}:${db_user_password}
db_user=anylog@127.0.0.1:anylog 
	
# Database access port
db_port=5432 

[mqtt]
# Run an MQTT client as part of the node (Publisher & Operator only) 
# URL: https://github.com/AnyLog-co/documentation/blob/master/mqtt.md
mqtt_enable=false

# From  MQTT pull raw data that's not within topic
mqtt_enable_other=false

# Connection info for broker
#mqtt_conn_info=<mqtt_conn_info> 

# Port for MQTT 
#mqtt_broker_port=<mqtt_broker_port> 

# Broker log message 
#mqtt_log=<mqtt_log> 

# mqtt topic name to get data from 
#mqtt_topic_name=<mqtt_topic_name>

# mqtt topic for database
#mqtt_topic_dbms=<mqtt_topic_dbms> 

# mqtt topic for table 
#mqtt_topic_table=<mqtt_topic_table> 

# mqtt topic for timestamp column 
#mqtt_column_timestamp=<mqtt_column_timestamp> 

# MQTT 'value' column type support. Options: 
#   int
#   bool 
#   str
#   timestmap 
#mqtt_column_value_type=<mqtt_column_value_type> 


# mqtt topic for value columns 
#mqtt_column_value=<mqtt_column_value> 

# MQTT columns othen than 'value' and 'timestamp' - note by add and "and" between each bring column users can set additional column values
# Sample call: "and column.measurement.str='bring [measurement]' and ..." 
#mqtt_extra_column=<mqtt_extra_column>	 

