from anylog_api.__support__ import json_dumps


def create_config_policy(policy_name:str, company_name:str, policy_id:str=None, ip:str=None, local_ip:str=None,
                         anylog_server_port=None, anylog_rest_port=None, anylog_broker_port=None, tcp_threads=None,
                         rest_threads=None, broker_threads=None, tcp_bind:bool=False, rest_bind:bool=False,
                         broker_bind:bool=False, rest_timeout=None, other_info:dict={}, script:list=[],
                         exception:bool=False):
    """
    Create a configuration policy
    :example:
        {'config' : {
            'name' : 'master-anylog_co.-configs',
            'company' : 'AnyLog Co.',
            'ip' : '!external_ip',
            'local_ip' : '!ip',
            'port' : '!anylog_server_port.int',
            'rest_port' : '!anylog_rest_port.int',
            'threads' : '!tcp_threads.int',
            'rest_threads' : '!rest_threads.int',
            'rest_timeout' : '!rest_timeout.int',
            'script' : [
                'process !local_scripts/policies/master_policy.al',
                'process !local_scripts/deploy_database.al',
                'run scheduler 1',
                'run blockchain sync where source=!blockchain_source and time=!blockchain_sync and dest=!blockchain_destination and connection=!ledger_conn',
                'process !local_scripts/policies/monitoring_policy.al',
                'if !deploy_local_script == true then process !local_scripts/loca'l_script.al'
            ],
            'id' : 'fd547a557d63e18d10335d8df59c2cfb',
            'date' : '2024-02-05T01:14:22.204991Z',
            'ledger' : 'global'
        }}
    :args:
        policy_name:str - name of the policy
        company_nmme:str - (company) owner of the policy
        policy_id:str - overwrite the default autogenerated policy ID
        ip:str - [External] IP of the machine if set to
        local_ip:str - [Local] IP of the machine
        anylog_rest_port:str - TCP port
        anylog_rest_port:str REST port
        anylog_broker_port:str - broker port
        tcp_threads - TCP threads count
        rest_threads - REST threads count
        broker_threads - broker threads count
        tcp_bind:bool - whether to bind TCP port against (local) IP
        rest_bind:bool - whether to bind REST port against (local) IP
        broker_bind:bool - whether to bind broker port against (local) IP
        rest_timeout - REST timeout
        other_info:dict - None-generic information to be included in policy
        script:list - list of commands to be executed as part of the config
        exception:bool - whether to print exception

    Use AnyLog dictionary param as a value - anylog_server_port="'!anylog_server_port'"
    :params:
        new_policy:dict - New policy
    :return:
        new_policy as a serialized JSON object
    """
    new_policy = {
        "config": {
            "name": policy_name,
            "company": company_name
        }
    }

    if ip:
        new_policy['config']['ip'] = ip
    if local_ip:
        new_policy['config']['local_ip'] = local_ip
    if anylog_server_port:
        new_policy['config']['port'] = anylog_server_port
        new_policy['config']['tcp_bind'] = tcp_bind
        if tcp_threads:
            new_policy['config']['threads'] = tcp_threads
    if anylog_rest_port:
        new_policy['config']['rest_port'] = anylog_rest_port
        new_policy['config']['rest_bind'] = rest_bind
        if rest_threads:
            new_policy['config']['rest_threads'] = rest_threads
        if rest_timeout:
            new_policy['config']['rest_timeout'] = rest_timeout
    if anylog_broker_port:
        new_policy['config']['broker_port'] = anylog_broker_port
        new_policy['config']['broker_bind'] = broker_bind
        if broker_threads:
            new_policy['config']['broker_threads'] = broker_threads
    if len(script) > 0:
        new_policy['config']['script'] = script

    if other_info:
        for key in other_info:
            new_policy['config'][key] = other_info[key]
    if policy_id:
        new_policy['config']['id'] = policy_id

    return json_dumps(content=new_policy, exception=exception)


def create_node_policy(node_type:str, policy_name:str, company_name:str, ip:str, anylog_server_port:int,
                       anylog_rest_port:int, policy_id:str=None, local_ip:str=None, anylog_broker_port:int=None,
                       cluster_id:str=None, other_info:dict={}, script:list=[], exception:bool=False):
    """
    Create policy for a specific node type
    :example:
    {
        "master": {
            "name": "anylog-master",
            "company": "AnyLog Co.",
            "ip": "136.23.47.189",
            "local_ip": "136.23.47.189",
            "port": 32048,
            "rest_port": 32049,
            "loc": "37.425423, -122.078360",
            "country": "US",
            "state": "CA",
            "city": "Mountain View"
    }}
    :args:
        node_type:str - Node type
            - master
            - operator
            - query
            - publisher
        policy_name:str - name of the policy
        company_nmme:str - (company) owner of the policy
        policy_id:str - overwrite the default autogenerated policy ID
        ip:str - [External] IP of the machine if set to
        local_ip:str - [Local] IP of the machine
        anylog_rest_port:str - TCP port
        anylog_rest_port:str REST port
        anylog_broker_port:str - broker port
        cluster_id:str - Cluster policy ID that operator will be associated with
        other_info:dict - None-generic information to be included in policy
        script:list - list of commands to be executed as part of the config
        exception:bool - whether to print exception
    :params:
        new_policy:dict - New policy
    :return:
        new_policy as a serialized JSON object
    """
    if node_type not in ['master', 'operator', 'query', 'publisher']:
        if exception is True:
            print(f"Invalid node type {node_type}. Valid node types: master, operator, query and publisher")
        return None
    new_policy = {
        node_type: {
            "name": policy_name,
            "company": company_name,
            "ip": ip,
            "port": anylog_server_port,
            "rest_port": anylog_rest_port
        }
    }

    if local_ip:
        new_policy[node_type]['local_ip'] = local_ip
    if anylog_broker_port:
        new_policy[node_type]['broker_port'] = anylog_broker_port

    if node_type == 'operator' and cluster_id:
        new_policy[node_type]['cluster_id'] = cluster_id
    elif node_type == 'operator' and not cluster_id:
        if exception is True:
            print(f"Missing cluster ID for operator node")
        return None

    if other_info:
        for key in other_info:
            new_policy[node_type][key] = other_info[key]

    if script:
        new_policy[node_type]['script'] = script
    if policy_id:
        new_policy[node_type]['id'] = policy_id

    return json_dumps(content=new_policy, exception=exception)

def create_cluster_policy(policy_name:str, company_name:str, policy_id:str=None, exception:bool=False):
    """
    Create cluster policy
    :example:
    {
        'cluster' : {
            'name' : 'litsanleandro-cluster1',
            'company' : 'Lit San Leandro',
            'id' : '0015392622f3eaac70eafa4311fc2338',
            'date' : '2022-06-04T22:47:48.479532Z',
            'status' : 'active',
            'ledger' : 'global'
    }}
    :args:
        policy_name:str - name of the policy
        company_nmme:str - (company) owner of the policy
    :params:
        new_policy:dict - New policy
    :return:
        new_policy as a serialized JSON object
    """
    new_policy = {
        "cluster": {
            "name": policy_name,
            "company": company_name
        }
    }

    if policy_id:
        new_policy['cluster']['id'] = policy_id

    return json_dumps(content=new_policy, exception=exception)

